version: '3.8'

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  loki_data:
  agent_logs:

networks:
  rpa_network:
    driver: bridge

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: rpa_monitoramento
      POSTGRES_USER: rpa_user
      POSTGRES_PASSWORD: rpa_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpa_user -d rpa_monitoramento"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: rpa_monitoramento
      POSTGRES_USER: rpa_user
      POSTGRES_PASSWORD: rpa_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@rpa.local
      DJANGO_SUPERUSER_PASSWORD: admin123
      SECRET_KEY: m8xJ5QWl2hT6vZk9sGfR1pNq3YbD4eXc7VwU0jHfLqS2tKmP
      DEBUG: "False"
      ALLOWED_HOSTS: "*"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  celery_worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A app worker --loglevel=info
    environment:
      POSTGRES_DB: rpa_monitoramento
      POSTGRES_USER: rpa_user
      POSTGRES_PASSWORD: rpa_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SECRET_KEY: sua-chave-secreta-muito-segura-aqui
      DEBUG: "False"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    restart: unless-stopped

  celery_beat:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      POSTGRES_DB: rpa_monitoramento
      POSTGRES_USER: rpa_user
      POSTGRES_PASSWORD: rpa_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SECRET_KEY: m8xJ5QWl2hT6vZk9sGfR1pNq3YbD4eXc7VwU0jHfLqS2tKmP
      DEBUG: "False"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observabilidade/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - rpa_network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./observabilidade/promtail-config.yml:/etc/promtail/config.yml
      - agent_logs:/logs
      - /var/log:/var/log:ro
    networks:
      - rpa_network
    depends_on:
      - loki
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./observabilidade/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rpa_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observabilidade/grafana/provisioning:/etc/grafana/provisioning
      - ./observabilidade/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - rpa_network
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379/0
      AGENT_TOKEN: token-agente-padrao
      AGENT_NAME: agente-01
    volumes:
      - agent_logs:/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - rpa_network
    restart: unless-stopped

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - grafana
    networks:
      - rpa_network
    restart: unless-stopped
